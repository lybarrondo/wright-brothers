<krpano>
	<include url="distortedhotspot_editor.xml" />
	<include url="polygonalhotspot_editor.xml" />
	<include url="numbers.xml" />
	<include url="scrollingtext.xml" />
	<include url="grid.xml" />
	<include url="stickies.xml" />
	
	<toolbox
			 align="lefttop"
			 x="10"
			 y="100"
			 css="font-family:Helvetica;font-size:12px;color:0xffffff;text-align:center;"
			 css2="font-family:Helvetica;font-size:10px;color:0xffffff;text-align:center;"
			 css3="font-family:Helvetica;font-size:14px;color:0xffffff;text-align:left;"	
			 css4="font-family:Helvetica;font-size:8px;color:0x000000;text-align:center;"
			 
	/>		 

<!-- temp fix  for use keystroke D / debugmode -->
<events name="no_d_key" keep="true" onkeydown="if(keycode == 68, showlog(true);set(debugmode,true);wait(0);showlog(false); );" />

	<!-- press T to	show the toolbox -->
	<events name="tb_keys" keep="true" onkeydown="ToolboxKeys();" />
	<action name="ToolboxKeys" scope="private:toolbox">
		<!--   trace(get(global.keycode)); -->
		if(global.keycode == 84, ShowToolbox(global.layer[tb_container].alpha)); <!-- T Toolbox -->
        if(global.keycode == 77, ToolBoxHome());      <!-- M Menu/Home -->
		if(global.keycode == 78, ShowTool(num));      <!-- N numbers editor -->
		if(global.keycode == 71, ShowGrid());         <!-- G  Grid -->
		if(global.keycode == 80, ShowTool(phe));      <!-- P polygonalhotspot editor -->
		if(global.keycode == 68, ShowTool(dhe));      <!-- D distortedhotspot editor -->
		if(global.keycode == 83, ShowStickies());     <!-- S Stickies -->
		if(global.keycode == 76, ToolboxPrint());     <!-- L Log -->
		if(global.keycode == 73, ToolboxHelp());      <!-- I Info -->
		if(global.keycode == 67, makescreenshot_hires(4000,3000);      <!-- C Camera -->
	</action>	
    
    <action name="ShowTool" scope="private:toolbox">
        if(global.layer[tb_container].alpha GT 0,
            ToolBoxHome();
            ToolSelect(%1);
        ,
            ToolBoxHome();
            tween(global.layer[tb_container].alpha, 1,0.5,, ToolSelect(%1));
        );
    </action>
    
	<!-- styles -->
	<style name="tb_chap" type="text" align="top" width="-20" height="30" bgcolor="0x666666" bgalpha="1" bgroundedge="0" vcenter="true" css="get:toolbox.css2" onover="set(bgcolor,0x336699);" onout="set(bgcolor,0x666666);" /> 
    <style name="keyc" type="text" keep="true" enabled="false" align="lefttop" x="2" y="2" bg="false" bgalpha="1" html="" css="get:toolbox.css4" zorder="100" />



	<layer name="tb_container" keep="true" type="container" autoalpha="true" alpha="0" align="get:toolbox.align" x="get:toolbox.x" y="get:toolbox.y" bgcolor="0x333333" bgalpha="1" width="200" height="305" bgroundedge="0" bgcapture="true" ondown="tb_draglayer();"	>
    
		<layer name="tb_tit" type="text" enabled="false" align="top" y="10" bg="false" vcenter="true" html="KRPANO TOOLBOX" css="get:toolbox.css" onclick="ToolBoxHome"  >
            <layer name="tb_keystit" type="text" align="lefttop" width="20" height="20" x="-10" y="-10" bg="false" alpha="0.4" html="M" vcenter="true" css="font-family:Helvetica;color:#ffffff;font-size:7px;" onclick="ToolBoxHome"  />
        </layer>
		
		<layer name="tb_numbers" style="tb_chap" y="130" html="NUMBERS" onclick="ToolSelect(num);" onloaded="MakeKeycode(num,N,get(name));"/>
		<layer name="tb_grid" style="tb_chap" y="170" html="GRID" onclick="ToolSelect(grid);" onloaded="MakeKeycode(grid,G,get(name));"/>
		<layer name="tb_phe" style="tb_chap" y="90" html="POLYGONAL HS EDITOR" onclick="ToolSelect(phe);" onloaded="MakeKeycode(phe,P,get(name));" />
		<layer name="tb_dhe" style="tb_chap" y="50" html="DISTORTED HS EDITOR" onclick="ToolSelect(dhe);" onloaded="MakeKeycode(dhe,D,get(name));" />
		<layer name="tb_stickies" style="tb_chap" y="210" html="STICKIES" onclick="ToolSelect(stickies);" onloaded="MakeKeycode(stickies,S,get(name));"/>
		<layer name="tb_camera" url="photo.png" align="bottom" x="-70" y="25" scale="0.35" onclick="makescreenshot_hires(4000,3000);"/>
		
		<layer name="tb_dragstrip1" type="text" align="bottom" y="6" bg="false" vcenter="true" html="drag me" css="get:toolbox.css2" alpha="0.5" enabled="false" />

		<layer name="tb_help" type="text" align="rightbottom" x="10" y="6" bg="false" vcenter="true" html="?" css="get:toolbox.css2" alpha="0.7" onclick="ToolboxHelp" />
	</layer>	

	<action name="ShowToolbox" scope="private:toolbox">
		if(%1 == 0, tween(%1,1);, tween(%1,0));
	</action>
    
    <action name="MakeKeycode" scope="private:toolbox">
        set(tkc, %1_tkc);
        addlayer(get(tkc)); 
        global.layer[get(tkc)].loadstyle(keyc);
        set(global.layer[get(tkc)], html=%2,parent=layer[%3]);
    </action>

	
	<action name="ToolSelect" scope="private:toolbox">
		for(set(i,0), i LT global.layer.count, inc(i),
            ifnot(%1 == 'grid' OR %1 == 'stickies',
			     if(global.layer[get(i)].style == tb_chap, set(global.layer[get(i)].visible, false));
            );
		);
		set(_tb, %1);
		if(%1 == 'dhe', callwith(global.layer[tb_container], tween(width|height, 405|341,,,set(global.layer[dhe_toolbox].visible, true))));
		if(%1 == 'phe', callwith(global.layer[tb_container], tween(width|height, 200|225,,,set(global.layer[phe_box].visible, true))));
		if(%1 == 'num', callwith(global.layer[tb_container], tween(width|height, 200|285,,,set(global.layer[num_container].visible, true))));
		if(%1 == 'grid', ShowGrid());
		if(%1 == 'stickies', ShowStickies()); 
		if(%1 == 'camera', makescreenshot());       
		set(global.layer[tb_tit].enabled,true);
	</action>
	
	
	<action name="ToolBoxHome" scope="private:toolbox">
		if(_tb == 'dhe', DheResetAllExit();set(global.layer[dhe_toolbox].visible, false));
		if(_tb == 'phe', PheExit();set(global.layer[phe_box].visible, false));
		if(_tb == 'num', set(global.layer[num_container].visible, false));
		
		callwith(global.layer[tb_container], tween(width|height, 200|265,,,
			for(set(i,0), i LT global.layer.count, inc(i),
				if(global.layer[get(i)].style == tb_chap, set(global.layer[get(i)].visible, true));
			);
			set(global.layer[tb_tit].enabled,false);
			set(_tb, null);
		));
		
	</action>

	<action name="tb_draglayer">
		copy(drag_currentx, x);
		copy(drag_currenty, y);
		copy(drag_stagex, mouse.stagex);
		copy(drag_stagey, mouse.stagey);
		indexoftxt(align_contains_right, get(align), 'right');
		indexoftxt(align_contains_bottom, get(align), 'bottom');
		calc(drag_align_x, align_contains_right GE 0 ? -1 : +1);
		calc(drag_align_y, align_contains_bottom GE 0 ? -1 : +1);
		asyncloop(pressed,
			calc(x, drag_currentx + (mouse.stagex - drag_stagex)*drag_align_x);
			calc(y, drag_currenty + (mouse.stagey - drag_stagey)*drag_align_y);
		  );
	</action>
	
	<action name="ToolboxPrint" scope="private:toolbox">

		if(_tb == 'num', NumPrint());
		if(_tb == 'phe', PhePrint());
		if(_tb == 'dhe', DhePrintCode());
		showlog();
	</action>	
	
	<!-- HELP SECTION -->
	<layer name="tb_help_container" type="text" keep="true" align="center" width="80%" bgcolor="0x333333" autoheight="true" autoalpha="true" alpha="0"  padding="20" html="data:html_tb_help" css="get:toolbox.css3" />
	
	<action name="ToolboxHelp" scope="private:toolbox">
		ifnot(global.tb_helpscroll,
			set(global.tb_helpscroll, true);
			ScrollingTextfieldLayer();
		,
			removelayer(stf_bg, true);
			set(global.tb_helpscroll, false);
		);
	</action>	
	
	<data name="html_tb_help" >
		<font size="+1px">Welcome to your tool box, <strong>"<i>Tommy</i>"</strong>.</font>
		[br][br]

        Keyboard Commands:[br]
        T  - tool box [br]
        M  - main menu. [br]
        D  to show/hide the Distorted hotspot editor. [br]
        P  to show/hide the Polygonal hotspot editor. [br]
        N  to show/hide the Numbers section. [br]
        S  to show/hide the Stickies.[br]
        G  to show/hide the Grid.[br]
        L  to log the Code. [br]   
        I  to show/hide the Info. [br]   
        
		[br][br]
		
		This dragable toolbox has 6 tools:
		[br]
		[li] Numbers [/li]
		[li] Grid [/li]
		[li] Polygonal Hotspot Editor [/li]
		[li] Distorted Hotspot Editor [/li]
		[li] Stickies [/li]
		
		[br][br][br]
		
		<font size="+1px">Numbers</font>
		[br][br]
		Shows mouse position, zoom level and other useful info.  Click <i>print</i> or <i>L</i> to d relevant xml code to copy and paste elsewhere. 
		[br][br][br]
		<font size="+1px">Grid</font>
		[br][br]
		Identify cube faces and position coordinates for editing purposes. Press G to show/hide.
		
		
		<font size="+1px">Polygonal Hotspot Editor</font>
		[br][br]Use to create or edit regular polygon hotspots.  Click on <i>create new polygon</i> and then draw on it by selecting vertices on the screen.  Press the space bar when done. Click <i>print</i> or press <i>L</i> to display relevant xml code in a window you can copy from.  <strong>TIPS:</strong> Use fine controls for final adjustments. Make all polygons for a scene in one pass. Don't quit toolbox with hotspot editor still open! 	
		
		
		<font size="+1px">Distorted Hotspot Editor</font>
		[br][br]Use to create or edit distorted hotspots.  Click <i>print</i> or <i>L</i> to see relevant xml code to copy and paste elsewhere.  <strong>TIPS:</strong> Same as polygonal, but also try reducing alpha of distorted hotspot during adjustments to assist alignment.
		

		[br][br][br]
		<font size="+1px">Stickies</font>
		[br][br]
		A growing repository of useful code blocks such as favorite styles, actions, etc. for quick copy and use elsewhere. Live demos of other virtual tours and samples of UI/UX functionality is also accessible through this <strong>portal</strong>.
		


	</data>
    

    <style name="html_div"
        type="container" 
        zorder="100" 
        align="center" width=""  height="80%" 
        bgborder="1 0xFFFFFF 0.5" bgcolor="0x333333" bgalpha="1"
        bgcapture="true" capture="true" handcursor="false"
        onloaded="add_stickie_html_code(get(global.data[html_example_code].content), 10);"
    /> 

	<action name="add_stickie_html_code" type="Javascript" ><![CDATA[
		var div = document.createElement("div");
		
		// basic styles to fit into the layer size and allow scrolling:
		div.style.width = "100%";
		div.style.height = "100%";
        
		div.style.overflow = "auto";
		div.style.boxSizing = "border-box";
		div.style.border = "0px";        
		div.style.overflow = "hidden";        
      
        
		div.style.padding = args[2] ? (args[2] + "px") : "0";
		
		// allow text selection (optional):
		div.style.webkitUserSelect =
		div.style.MozUserSelect =
		div.style.msUserSelect =
		div.style.userSelect = "text";
		
		// hacks for browsed-based mouse-wheel and touch-scrolling support:
		div.addEventListener("mousewheel", function(event){ event.stopPropagation(); }, true);
		div.addEventListener("DOMMouseScroll", function(event){ event.stopPropagation(); }, true);
		div.addEventListener("touchstart", function(event){ if(krpano.device.ios && window.innerHeight == krpano.display.htmltarget.offsetHeight){ /* avoid the iOS 'overscrolling' for fullpage viewers */ var bs = document.body.parentNode.style; bs.position="fixed"; bs.top=0; bs.left=0; bs.right=0; bs.bottom=0; } krpano.control.preventTouchEvents = false; event.stopPropagation(); }, true);
		div.addEventListener("touchend", function(event){ krpano.control.preventTouchEvents = true; event.stopPropagation(); }, true);
		div.addEventListener("gesturestart", function(event){ event.preventDefault(); }, true);
		
		// add some html code:
		div.innerHTML = args[1];
	
		// add the div to the layer element:
		caller.sprite.appendChild(div);
	
	]]></action>
    
	<data name="html_example_code"><![CDATA[
	]]></data>
	
	<style name="button" type="text"
	       css="text-align:center; color:#EFEFEF; font-family:Arial; font-size:26px;"
	       padding="4 8"
	       mergedalpha="false"
	       bgborder="4 0xFFFFFF 1"
	       bgroundedge="2"
	       bgshadow="0 1 4 0x000000 1.0"
	       onover="set(bgcolor, 0xC7E4FC);"
	       onout="calc(bgcolor, pressed ? 0x90CAF9 : 0xFFFFFF);"
	       ondown="set(bgcolor, 0x90CAF9);"
	       onup="calc(bgcolor, hovering ? 0xC7E4FC : 0xFFFFFF);"
	       />

	<action name="makescreenshot_init" type="Javascript" autorun="onstart"><![CDATA[

		// Load the FileSaver.js script for saving files locally cross browser.
		// Source: https://github.com/eligrey/FileSaver.js/
		krpano.loadFile("toolbox/FileSaver.js", function(file)
		{
			// remove the 'export ' part from the code to be able to 'eval' it
			eval(file.data.replace("export ",""));
			
			// store the 'saveAs' function from the 'FileSaver.js' in krpano
			krpano.screenshotSaveAs = saveAs;
		});


		// count the screenshots (for the filenames)
		krpano.makescreenshot_count = 1;
		
		
		// create an empty Object as makeScreenshot cache
		var makeScreenshotCache = {};


		// add a 'makescreenshot' action to krpano
		krpano.makescreenshot = function(screenshotwidth,screenshotheight)
		{
			// if there is already a screenshot layer, remove it now
			krpano.call("removelayer(screenshot,true)");

			// make a screenshot as canvas
			var sizeinfo = {w:0, h:0};
			var screenshotcanvas = krpano.webGL.makeScreenshot(screenshotwidth, screenshotheight, true, "canvas", 0, null, sizeinfo, makeScreenshotCache);

			if (screenshotcanvas)
			{
				// example - draw something on the canvas, set to 1 to enable
				if (0)
				{
					var ctx = screenshotcanvas.getContext("2d");
					ctx.font = "25px Times";
					ctx.fillStyle = "#FFFFFF";
					ctx.fillText("krpano makeScreenshot() API Test", 50, screenshotcanvas.height-50);
				}

				// add some krpano layers that show the screenshot and allow saving it
				var container = krpano.addlayer("screenshot");
				container.type = "container";
				container.align="center";
				container.registercontentsize(sizeinfo.w+20, sizeinfo.h+20);
				container.width  = sizeinfo.w > sizeinfo.h ? "70%" : "prop";
				container.height = sizeinfo.w > sizeinfo.h ? "prop" : "70%";
				container.bgcolor = 0xFFFFFF;
				container.bgalpha = 1.0;
				container.bgshadow = "0 5 40 0x000000 1.0";
				container.bgroundedge = 3;
				container.bgcapture = true;
				container.zorder = 99;
				container.onclick = "set(enabled,false); tween(alpha,0,0.2,default,removelayer(get(name),true));";

				var image = krpano.addlayer("screenshotimage");
				image.url = screenshotcanvas.toDataURL();		// convert the screenshot-canvas to a base64 data-url for showing it
				image.parent = "screenshot";
				image.align = "center";
				image.width = -20;
				image.height = -20;
				image.zorder = 1;
				image.enabled = false;
				
				var closer = krpano.addlayer("closeimage");
				closer.loadstyle("button");
				closer.parent = "screenshot";
				closer.align = "bottom";
				closer.y = 25;
				closer.x = 50;
				closer.zorder = 2;
				closer.html = "CLOSE";	
				closer.onclick = "removelayer(screenshot,true)";



				// saving screenshots will be only possible when Blob and canvas.toBlob is supported by the browser (for more browser support add polyfills)
				if (screenshotcanvas.toBlob)
				{
					var saveasbutton = krpano.addlayer("screenshotsaveasbutton");
					saveasbutton.loadstyle("button");
					saveasbutton.parent = "screenshot";
					saveasbutton.align = "bottom";
					saveasbutton.y = 25;
					saveasbutton.x = -50;
					saveasbutton.zorder = 2;
					saveasbutton.autoalpha = true;
					saveasbutton.alpha = 1.0;
					saveasbutton.html = "SAVE";
					saveasbutton.onclick = function()
					{
						// save as JPEG with 97% quality
						screenshotcanvas.toBlob(function(blob){ krpano.screenshotSaveAs(blob,"screenshot" + (krpano.makescreenshot_count++) + ".jpg"); }, "image/jpeg", 0.97);
					};
					
					// saving screenshots will be only possible when Blob and canvas.toBlob is supported by the browser (for more browser support add polyfills)
					
					
				}
			}
		}

	]]></action>

	<action name="makescreenshot_hires" scope="localonly" args="screenshotwidth, screenshotheight">
		trace('makescreenshot_hires: start loading');
		
		<!-- backup the current setting -->
		copy(usercontrol_backup, global.control.usercontrol);
		copy(maxmem_backup, global.memory.maxmem);
		
		<!-- disable the user control while loading -->
		set(global.control.usercontrol, off);
		
		<!-- force to load the highest multires level (TODO: calc best level depending on screenshot size) -->
		set(global.lockmultireslevel, calc(global.image.level.count-1));
		
		<!-- set a high memory limit - should be enough for all tiles for the requested view -->
		set(global.memory.maxmem, 1500);
		
		<!-- info: show/outline the tiles -->
		set(global.display.showpolys,true);
		
		<!-- add an info text -->
		addlayer(auto,l);
		set(l, type=text, align=center, html='loading...', css='color:#FFFFFF;text-align:center;', bg=false, txtshadow='0 1 4 0x000000 1.0', enabled=false);

		<!-- reset the internal loadstate -->
		set(global.image.loadstate, -1);
		
		<!-- and wait until it is changed to state 3 which means 'view fully loaded' -->
		callwhen(global.image.loadstate GE 3,
		
			<!-- remove the info text -->
			removelayer(get(l.name));
			
			<!-- hide the tile outlines -->
			set(global.display.showpolys,false);
			
			<!-- make the actual screenshot -->
			global.makescreenshot(get(screenshotwidth), get(screenshotheight));
			
			<!-- restore all changed settings -->
			set(global.lockmultireslevel, -1);
			copy(global.memory.maxmem, maxmem_backup);
			copy(global.control.usercontrol, usercontrol_backup);
		);
		
		<!-- request a redraw -->
		updatescreen();
		
	</action>
    
</krpano>
