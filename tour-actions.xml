<krpano version="1.20.11">
	
   	<style name="jumpS" url="ifg/ringAnim.png" scale="0.8" alpha="0.4" edge="center" distorted="true"
   		onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
       onover.addevent="tween(scale,0.55);"
       onout.addevent="tween(scale,0.5);"
   		onloaded.addevent="skin_hotspotstyle_setup();do_crop_animation(200,50, 10);"
   		/>
	
	<!-- the 'tooltip' textfield -->
	<layer name="tooltip" keep="true"
	       url="plugins/textfield.swf"
	       parent="STAGE"
	       visible="false" alpha="0"
	       enabled="false"
	       align="lefttop"
	       edge="right"
	       oy="28"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0"
	       borderwidth="1.0" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="text-align:center; color:#FFFFCC; font-family:DINOT, Century Gothic, CenturyGothic, AppleGothic, sans-serif; letter-spacing:0.05em;font-size:16px;"
	       html=""
	       />
		   
   	<!-- the 'tooltip' textfield -->
   	<layer name="tooltip-i" keep="true"
   	       url="plugins/textfield.swf"
   	       parent="STAGE"
   	       visible="false" alpha="0"
   	       enabled="false"
   	       align="lefttop"
   	       edge="right"
   	       oy="28"
   	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
   	       border="false" bordercolor="0x000000" borderalpha="1.0"
   	       borderwidth="1.0" roundedge="0"
   	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
   	       textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
   	       css="text-align:center; font-style: italic; color:#FFFFCC; font-family:DINOT, Century Gothic, CenturyGothic, AppleGothic, sans-serif; letter-spacing:0.05em;font-size:16px;"
   	       html=""
   	       />
		   
   	<!-- the 'tooltip' textfield -->
   	<layer name="tooltip-left" keep="true"
   	       url="plugins/textfield.swf"
   	       parent="STAGE"
   	       visible="false" alpha="0"
   	       enabled="false"
   	       align="lefttop"
   	       edge="right"
   	       oy="-21" ox="-11"
   	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
   	       border="false" bordercolor="0x000000" borderalpha="1.0"
   	       borderwidth="1.0" roundedge="0"
   	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
   	       textshadow="2" textshadowrange="4.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
   	       css="text-align:center; color:#EFEFEF; font-family:DINOT, Century Gothic, CenturyGothic, AppleGothic, sans-serif;letter-spacing:0.05em;font-size:16px;"
   	       html=""
   	       />
		   
  	<!-- the 'tooltip' textfield -->
  	<layer name="tooltip-LL" keep="true"
  	       url="plugins/textfield.swf"
  	       parent="STAGE"
  	       visible="false" alpha="0"
  	       enabled="false"
  	       align="lefttop"
  	       edge="right"
  	       oy="21" ox="-11"
  	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
  	       border="false" bordercolor="0x000000" borderalpha="1.0"
  	       borderwidth="1.0" roundedge="0"
  	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
  	       textshadow="2" textshadowrange="4.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
  	       css="text-align:center; color:#EFEFEF; font-family:DINOT, Century Gothic, CenturyGothic, AppleGothic, sans-serif;letter-spacing:0.05em;font-size:16px;"
  	       html=""
  	       />

<!-- ########################################################################################################################## -->
<!-- #####  ACTIONS  ########################################################################################################## -->
<!-- ########################################################################################################################## -->
	
	<!-- UI controls, opens a mask and overlay of controls -->
	<action name="show_guide" devices="normal">
		<!-- main mask and container-->
		set(layer[mask-welcome].visible, true);
		tween(layer[mask-welcome].alpha, 0.92, 2.0);
		set(layer[cont-508].visible,true);
		<!-- control bar at bottom-->
		tween(layer[skin_layer].y, -220, 1.5);
		tween(layer[skin_layer].x, 70, 1.5);
		<!-- menu -->
		tween(layer[o-menu].y, 22, 2.5);
		tween(layer[o-menu].alpha, 1, 2.5);
		<!-- settings -->
		tween(layer[o-settings].y, 100, 1.5);
		tween(layer[o-settings].alpha, 1, 1.5);
		tween(layer[btn-508].alpha, 0.0, 0.75);
		tween(layer[settings-508].alpha, 0, 0.75);
		tween(layer[cont-508].alpha, 0, 0.75);
		<!-- title -->
		tween(layer[o-title].y, 285, 1.5);
		tween(layer[o-title].alpha, 1, 1.5);
		<!-- arrow controls -->
		tween(layer[o-box].y, 232.5, 1.5);
		tween(layer[o-box].alpha, 1, 1.5);
		<!-- zoom -->
		tween(layer[o-zoom-in].y, 265, 1.5);
		tween(layer[o-zoom-in].alpha, 1, 1.5);
		tween(layer[o-zoom-out].y, 265, 1.5);
		tween(layer[o-zoom-out].alpha, 1, 1.5);
		<!-- stops -->
		tween(layer[o-backward].y, 230, 1.5);
		tween(layer[o-backward].alpha, 1, 1.5);
		tween(layer[o-stops].y, 230, 1.5);
		tween(layer[o-stops].alpha, 1, 1.5);
		tween(layer[o-forward].alpha, 1, 1.5);
		tween(layer[o-forward].y, 230, 1.5);
		<!-- stops -->
		tween(layer[o-full].y, 230, 1.5);
		tween(layer[o-full].alpha, 1, 1.5);
	</action>
	
	<!-- UI controls, opens a mask and overlay of controls -->set(layer[cont-508].visible,false);
	<action name="hide_guide" devices="normal">
		<!-- main mask and container-->
		tween(layer[mask-welcome].alpha, 0.0, 0.75,default,set(layer[mask-welcome].visible, false));
		<!-- control bar at bottom-->
		tween(layer[skin_layer].y, 5, 0.75);
		tween(layer[skin_layer].x, 0, 0.75);
		<!-- menu -->
		tween(layer[o-menu].y, -100, 0.75);
		tween(layer[o-menu].alpha, 0.0, 0.75);
		<!-- settings -->
		tween(layer[o-settings].y, -36, 0.75);
		tween(layer[o-settings].alpha, 0.0, 0.75);
		tween(layer[btn-508].alpha, 1.0, 0.75);
		tween(layer[settings-508].alpha, 1.0, 0.75);
		tween(layer[cont-508].alpha, 1.0, 0.75);
		<!-- title -->
		tween(layer[o-title].y, 40, 0.75);
		tween(layer[o-title].alpha, 0.0, 0.75);
		<!-- arrow controls -->
		tween(layer[o-box].y, 0, 0.75);
		tween(layer[o-box].alpha, 0.0, 0.75);
		<!-- zoom -->
		tween(layer[o-zoom-in].y, 50, 0.75);
		tween(layer[o-zoom-in].alpha, 0.0, 0.75);
		tween(layer[o-zoom-out].y, 50, 0.75);
		tween(layer[o-zoom-out].alpha, 0.0, 0.75);
		<!-- stops -->
		tween(layer[o-backward].y, 10, 0.75);
		tween(layer[o-backward].alpha, 0.0, 0.75);
		tween(layer[o-stops].y, 10, 0.75);
		tween(layer[o-stops].alpha, 0.0, 0.75);
		tween(layer[o-forward].alpha, 0.0, 0.75);
		tween(layer[o-forward].y, 10, 0.75);
		<!-- stops -->
		tween(layer[o-full].y, 10, 0.75);
		tween(layer[o-full].alpha, 0.0, 0.75);
	</action>
	
	<action name="do_crop_animation" scope="local" args="framewidth, frameheight, framerate">
		<!-- define local variables -->
		calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
		calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
		def(local.frame, integer, 0);
	
		<!-- set the first frame -->
		calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);
	
		<!-- do the animation -->
		setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
			if(caller.loaded,
				inc(frame);
				if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
				mod(xpos, frame, xframes);
				div(ypos, frame, xframes);
				Math.floor(ypos);
				mul(xpos, framewidth);
				mul(ypos, frameheight);
				calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
			  ,
				<!-- stop the interval when the hotspot gets removed -->
				clearinterval(calc('crop_anim_' + caller.name));
			);
		);
	</action>

	<action name="draghotspot">
		spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery, calc(mouse.stagex LT stagewidth/2 ? 'l' : 'r'));
		sub(drag_adjustx, mouse.stagex, hotspotcenterx);
		sub(drag_adjusty, mouse.stagey, hotspotcentery);
		asyncloop(pressed,
			sub(dx, mouse.stagex, drag_adjustx);
			sub(dy, mouse.stagey, drag_adjusty);
			screentosphere(dx, dy, ath, atv);

		  );
	</action>

	<action name="open-mask">
		set(layer[%1].visible,true);tween(layer[%1].alpha,1.0,0.4);
	</action>

	<action name="close-mask">
		tween(layer[%1].alpha,0.0,0.4,default,set(layer[%1].visible,false));
	</action>

	<action name="popup" scope="private:POPUP" args="type, content, width, height, scrollbars"><![CDATA[
		if(popup, break(); );
	
		addlayer('popup_bg', popup_bg);
		set(popup_bg,
			type=container,
			align=lefttop, width=100%, height=100%,
			zorder=99,
			handcursor=false,
			bgcapture=true,
			capture=false,
			bgcolor=0x000000, onloaded='tween(bgalpha,0.9,1.0);',	// optional: colorize the background
			ondown='popup_close()'
		);
	
		addlayer('popup', popup);
		set(layer[mask-welcome].visible, true);
		tween(layer[mask-welcome].alpha, 0.80, 2.0);
		set(popup,
			type=container,
			parent='popup_bg',
			width=calc(min(width,global.stagewidth*0.9)),
			height=calc(min(height,global.stageheight*0.8)),
			align=center,
			bgborder='1 0x555555 1',
			bgcolor=0xf3f0eb,
			bgalpha=0.95,
			bgshadow='0 10 20 0x000000 0.5',
			bgcapture=true,
			maskchildren=false,
			capture=true,
			handcursor=false,
			alpha=0
		);
	
		// optional: add a close button
		addlayer('popup_close_x', closex);
		addlayer('popup_bio_one', bio_one);
		set(closex,
			url='plugins/textfield.swf',
			html='data:o-btn-close', 
			css='color:0xFFFFFF; font-size:22px;',
			bgalpha=0.0,
			parent='popup',
			align=righttop,
			x=-10,
			y=-16,
			edge=center,
			scale=0.7,
			zorder=99,
			alpha=1.0,
			onover='tween(color,0xFFFF00)',
			onout='tween(color,0xFFFFFF)',
			ondown='tween(alpha,1)',
			onup='tween(alpha,0.70)',
			onclick='popup_close()',
			alt="close button"
		);

		if(type == 'html',
			set(popup.type, html);
			copy(popup.html, content);
			copy(popup.htmlscrollbars, scrollbars);

		  ,type == 'iframe',
			set(popup.type, iframe);
			copy(popup.iframeurl, content);

		  ,type == 'image',
		 	set(popup,
		 		bgcolor=0xFFFFFF,
		 		bgalpha=1,
		 	);
			addlayer("popup_image", img);
			set(img,
				url=get(content),
				align=center,
				width=-20, height=-20,
				parent=get(popup.name),
				onloaded='popup_imageloaded()'
			);
		);

		tween(global.plugin[pp_blur].range, 40.0);
		delayedcall(0.2, tween(global.layer[popup].alpha, 1.0); );

		// events when the popup should get closed automatically
		set(global.events[popup].onremovepano, popup_close() );
		set(global.events[popup].onresize, popup_close() );
	]]></action>


	<action name="popup_close">
		set(global.plugin[popup_bg].enabled, false);
		set(global.events[popup].name, null);
		tween(global.plugin[pp_blur].range, 0.0);
		tween(global.layer[popup_bg].bgalpha, 0.0, 0.70);
		tween(global.layer[popup].alpha, 0.0, 0.25, default,
			removelayer('popup_bg', true);
			scope(private:POPUP, delete(popup); );
		);
	</action>


	<action name="popup_imageloaded" scope="private:POPUP">
		calc(imgw, caller.imagewidth + 20);
		calc(imgh, caller.imageheight + 20);
		calc(maxw, global.stagewidth*0.9);
		calc(maxh, global.stageheight*0.8);
		if(imgw GT maxw,
			calc(imgh, round(imgh * maxw / imgw));
			copy(imgw, maxw);
		);
		if(imgh GT maxh,
			calc(imgw, round(imgw * maxh / imgh));
			copy(imgh, maxh);
		);

		set(global.layer[get(caller.parent)], width=get(imgw), height=get(imgh) );
	</action>

	<action name="close-Frame">
			tween(hotspot[%1].alpha,0.0,0.4,default,set(hotspot[%1].visible,false));
	</action>

	<action name="open-Frame">
			set(hotspot[%1].visible,true);
			tween(hotspot[%1].alpha,1.0,0.4);
	</action>

	<action name="open-mask">
		set(layer[%1].visible,true);tween(layer[%1].alpha,1.0,0.4);
	</action>

	<action name="close-mask">
		tween(layer[%1].alpha,0.0,0.4,default,set(layer[%1].visible,false));
	</action>

	<action name="show-popup">
				removelayer('popup', true);
				scope(private:POPUP, delete(popup); );
				if(layer[show-info].visible == true, popup('html', get(data[%1].content), 600, 200, true);)
	</action>

	<action name="hide-popup">
				removelayer('popup', true);
				scope(private:POPUP, delete(popup); );							
	</action>	

	<action name="hide_layers">
	set(layer[cont-508].visible,false);
	set(layer[mapBtn].visible,false);
	set(layer[skin_layer].visible,false);
	set(hotspot[obj_leader].visible,false);
	</action>

	<action name="show_layers">
	set(layer[cont-508].visible,true);
	set(layer[mapBtn].visible,true);
	set(layer[skin_layer].visible,true);
	set(hotspot[obj_leader].visible,true);
	</action>
	
	<!-- ################################################# -->
	<!-- ######         CUSTOMS    ACTIONS          ###### -->
	<!-- ################################################# -->
		<action name="set_title">
		set(layer[title-bkg].width, %1);
		</action>
		
		<!-- ACTION: Slice a png impage sprite into frames and the play a movie back. Used for dynamic hotspots. -->
		<action name="do_crop_animation" scope="local" args="framewidth, frameheight, framerate">
			<!-- define local variables -->
			calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
			calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
			def(local.frame, integer, 0);
		
			<!-- set the first frame -->
			calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);
		
			<!-- do the animation -->
			setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
				if(caller.loaded,
					inc(frame);
					if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
					mod(xpos, frame, xframes);
					div(ypos, frame, xframes);
					Math.floor(ypos);
					mul(xpos, framewidth);
					mul(ypos, frameheight);
					calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
				  ,
					<!-- stop the interval when the hotspot gets removed -->
					clearinterval(calc('crop_anim_' + caller.name));
				);
			);
		</action>
		
		
</krpano>
